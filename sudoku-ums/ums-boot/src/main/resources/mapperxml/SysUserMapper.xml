<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zumin.sudoku.ums.mapper.SysUserMapper">
  <resultMap id="BaseResultMap" type="com.zumin.sudoku.ums.pojo.SysUser">
    <!--@mbg.generated-->
    <!--@Table sys_user-->
    <id column="id" jdbcType="BIGINT" property="id"/>
    <result column="username" jdbcType="VARCHAR" property="username"/>
    <result column="password" jdbcType="VARCHAR" property="password"/>
    <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
    <result column="avatar" jdbcType="VARCHAR" property="avatar"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <result column="recent_login_time" jdbcType="TIMESTAMP" property="recentLoginTime"/>
    <result column="enabled" jdbcType="TINYINT" property="enabled"/>
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, username, `password`, nickname, avatar, create_time, recent_login_time, enabled
  </sql>

  <sql id="SelectUserWithRole">
    select u.*, r.id as role_id, r.name as role_name, r.nickname as role_nickname
    from sys_user u
           inner join sys_user_role ur on u.id = ur.user_id
           inner join sys_role r on ur.role_id = r.id
  </sql>

  <resultMap extends="BaseResultMap" id="UserWithRole" type="com.zumin.sudoku.ums.pojo.SysUser">
    <collection ofType="com.zumin.sudoku.ums.pojo.SysRole" property="roleList">
      <id column="role_id" property="id"/>
      <result column="role_name" property="name"/>
      <result column="role_nickname" property="nickname"/>
    </collection>
  </resultMap>

  <select id="countNewUserByDateBetween" resultType="java.lang.Integer">
    select count(1)
    from sys_user
    where DATE(`create_time`) <![CDATA[>=]]> DATE(#{startDate,jdbcType=DATE})
    and DATE(`create_time`) <![CDATA[<]]> DATE(#{endDate,jdbcType=DATE})
  </select>

  <select id="countRecentLoginUserByDateBetween" resultType="java.lang.Integer">
    select count(1)
    from sys_user
    where DATE(`recent_login_time`) <![CDATA[>=]]> DATE(#{startDate,jdbcType=DATE})
    and DATE(`recent_login_time`) <![CDATA[<]]> DATE(#{endDate,jdbcType=DATE})
  </select>

  <select id="selectWithRoleByUsername" resultMap="UserWithRole">
    WITH user_merge_role as (
    <include refid="SelectUserWithRole"/>
    )
    select *
    from user_merge_role
    where username = #{username,jdbcType=VARCHAR}
  </select>

  <select id="selectAllWithRole" resultMap="UserWithRole">
    WITH user_merge_role as (
    <include refid="SelectUserWithRole"/>
    )
    select *
    from user_merge_role
  </select>

  <select id="selectByConditionWithRole" resultMap="UserWithRole">
    WITH user_merge_role as (
    <include refid="SelectUserWithRole"/>
    )
    , data as (
    select *
    from user_merge_role
    <where>
      <if test="user.createTimeRange != null">
        create_time <![CDATA[>=]]> #{user.createTimeRange.start,jdbcType=TIMESTAMP}
        and create_time <![CDATA[<=]]> #{user.createTimeRange.end,jdbcType=TIMESTAMP}
      </if>
      <if test="user.recentLoginTimeRange != null">
        and recent_login_time <![CDATA[>=]]> #{user.recentLoginTimeRange.start,jdbcType=TIMESTAMP}
        and recent_login_time <![CDATA[<=]]> #{user.recentLoginTimeRange.end,jdbcType=TIMESTAMP}
      </if>
      <if test="user.username != null and user.username.trim() != ''">
        and username like concat('%', #{user.username,jdbcType=VARCHAR}, '%')
      </if>
      <if test="user.nickname != null and user.nickname.trim() != ''">
        and nickname like concat('%', #{user.username,jdbcType=VARCHAR}, '%')
      </if>
      <if test="user.enabled != null">
        and enabled = #{user.enabled,jdbcType=BOOLEAN}
      </if>
      <if test="user.roleNameList != null and user.roleNameList.size() > 0">
        and role_name in
        <foreach close=")" collection="user.roleNameList" item="name" open="(" separator=",">
          #{name,jdbcType=VARCHAR}
        </foreach>
      </if>
    </where>
    )
    select *
    from data
    <where>
      <if test="user.roleNameList != null and user.roleNameList.size() > 0">
        id in (
        select ids.u_id
        from (
        select user_merge_role.id as u_id, count(1) as role_count
        from user_merge_role
        group by u_id) as ids
        where ids.role_count = ${user.roleNameList.size()})
      </if>
    </where>
  </select>

  <select id="selectByNameWithRole" resultMap="UserWithRole">
    WITH user_merge_role as (
    <include refid="SelectUserWithRole"/>
    )
    select *
    from user_merge_role
    <where>
      <if test="name != null and name != ''">
        username like concat('%', #{name,jdbcType=VARCHAR}, '%')
        or nickname like concat('%', #{name,jdbcType=VARCHAR}, '%')
      </if>
    </where>
  </select>

  <update id="updateModifyById">
    update sys_user
    <set>
      <if test="user.username != null">
        username = #{user.username,jdbcType=VARCHAR},
      </if>
      <if test="user.nickname != null">
        nickname = #{user.nickname,jdbcType=VARCHAR},
      </if>
      <if test="user.createTime != null">
        create_time = #{user.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="user.recentLoginTime != null">
        recent_login_time = #{user.recentLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="user.enabled != null">
        enabled = #{user.enabled,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{user.id,jdbcType=INTEGER}
  </update>

  <select id="selectWithRoleById" resultMap="UserWithRole">
    WITH user_merge_role as (
    <include refid="SelectUserWithRole"/>
    )
      select *
      from user_merge_role
      where id = #{userId,jdbcType=BIGINT}
  </select>
</mapper>